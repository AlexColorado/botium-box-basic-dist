!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("util"),require("path"),require("slugify"),require("nodegit"),require("botium-core/src/scripting/Constants"),require("debug"),require("botium-core/src/Capabilities"),require("lodash"),require("p-queue"),require("delay"),require("botium-core"),require("botium-core/src/Fluent")):"function"==typeof define&&define.amd?define(["util","path","slugify","nodegit","botium-core/src/scripting/Constants","debug","botium-core/src/Capabilities","lodash","p-queue","delay","botium-core","botium-core/src/Fluent"],t):e.main=t(e.util,e.path,e.slugify,e.nodegit,e.Constants,e.debug,e.Capabilities,e.lodash,e.pQueue,e.delay,e.botiumCore,e.Fluent)}(this,function(e,t,o,s,r,i,a,n,u,c,l,p){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,t=t&&t.hasOwnProperty("default")?t.default:t,o=o&&o.hasOwnProperty("default")?o.default:o,s=s&&s.hasOwnProperty("default")?s.default:s,r=r&&r.hasOwnProperty("default")?r.default:r,i=i&&i.hasOwnProperty("default")?i.default:i,a=a&&a.hasOwnProperty("default")?a.default:a,n=n&&n.hasOwnProperty("default")?n.default:n,u=u&&u.hasOwnProperty("default")?u.default:u,c=c&&c.hasOwnProperty("default")?c.default:c,l=l&&l.hasOwnProperty("default")?l.default:l,p=p&&p.hasOwnProperty("default")?p.default:p;i("botium-retrieve-all-test-cases");var d={prepareConvos:(e,t,o)=>{const s=e.testSets.filter(e=>e.expandConvos).length>0,r=e.testSets.filter(e=>e.expandUtterancesToConvos).length>0,i=e.testSets.filter(e=>e.expandScriptingMemory).length>0;return r&&(o("expanding utterances to convos ..."),t.compiler.ExpandUtterancesToConvos()),i&&(o("expanding scripting memories to convos ..."),t.compiler.ExpandScriptingMemoryToConvos()),(s||r||i)&&(o("expanding convos ..."),t.compiler.ExpandConvos()),o(`found ${t.compiler.convos.length} convos ...`),t.compiler.convos},merge:(e,t,o)=>{const s={};e.botium&&e.botium.Capabilities&&Object.assign(s,e.botium.Capabilities),t.botium&&t.botium.Capabilities&&Object.assign(s,t.botium.Capabilities);const r={};e.botium&&e.botium.Sources&&Object.assign(r,e.botium.Sources),t.botium&&t.botium.Sources&&Object.assign(r,t.botium.Sources);const i=o?n.cloneDeep(process.env):{};return e.botium&&e.botium.Envs&&Object.assign(i,e.botium.Envs),t.botium&&t.botium.Envs&&Object.assign(i,t.botium.Envs),{caps:s,sources:r,envs:i}},MESSAGE_TYPE:{CANCEL:"CANCEL",STOP:"STOP",CREATE_JOB:"CREATE_JOB",CREATE_JOB_COMPLETE:"CREATE_JOB_COMPLETE",CREATE_JOB_FAILED:"CREATE_JOB_FAILED",RESULT:"RESULT",LOG:"LOG"}};l.BotDriver;const{prepareConvos:m,merge:b,MESSAGE_TYPE:E}=d,f=e=>{g(E.LOG,e)};let O={};process.on("message",({type:e,requestId:t})=>{switch(e){case E.CANCEL:break;case E.CREATE_JOB_COMPLETE:O[t].resolve(),delete O[t];break;case E.CREATE_JOB_FAILED:O[t].reject(),delete O[t];break;default:f(`Unknown message type: ${e}`),process.exit(1)}});const g=(e,t,o)=>{process.send({type:e,message:t,requestId:o})};let C;try{C=JSON.parse(process.argv[2])}catch(e){f("Init: Failed to parse args!"),process.exit(1)}C&&(void 0).then(e=>(g(E.RESULT,e),f("Exiting, worker finished"),Promise.all(Object.values(O).map(e=>e.promise)).then(()=>process.exit(0)))).catch(t=>(f(`Exiting, error occured: ${e.inspect(t)}`),Promise.all(Object.values(O).map(e=>e.promise)).then(()=>process.exit(1))));return{}});
