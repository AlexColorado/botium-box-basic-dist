# import Agent from "./generated/prisma.graphql"
# import AgentCreateInput from "./generated/prisma.graphql"
# import AgentUpdateInput from "./generated/prisma.graphql"
# import AgentWhereInput from "./generated/prisma.graphql"
# import AgentOrderByInput from "./generated/prisma.graphql"

# import Chatbot from "./generated/prisma.graphql"
# import ChatbotCreateInput from "./generated/prisma.graphql"
# import ChatbotUpdateInput from "./generated/prisma.graphql"
# import ChatbotWhereInput from "./generated/prisma.graphql"
# import ChatbotOrderByInput from "./generated/prisma.graphql"

# import TestSession, TestSessionCreateInput, TestSessionWhereInput, TestSessionOrderByInput from "./generated/prisma.graphql"
# import TestSessionTestCaseResult, TestSessionTestCaseResultWhereInput, TestSessionTestCaseResultOrderByInput from "./generated/prisma.graphql"
# import TestSessionSubscriptionPayload from "./generated/prisma.graphql"
# import TestSessionJob, TestSessionJobLog, TestSessionJobLogOrderByInput from "./generated/prisma.graphql"

# import TestSet, TestSetCreateInput, TestSetUpdateInput from "./generated/prisma.graphql"
# import TestSetScript, TestSetScriptCreateInput, TestSetScriptUpdateInput from "./generated/prisma.graphql"
# import TestSetRepository, TestSetRepositoryCreateInput, TestSetRepositoryUpdateInput from "./generated/prisma.graphql"
# import TestSetFolder, TestSetFolderCreateInput, TestSetFolderUpdateInput from "./generated/prisma.graphql"
# import TestSetExcel, TestSetExcelCreateInput, TestSetExcelUpdateInput from "./generated/prisma.graphql"

# import DeviceSet, DeviceSetCreateInput, DeviceSetUpdateInput, DeviceDescriptorCreateInput from "./generated/prisma.graphql"
# import UserRole, UserCreateInput, UserUpdateInput, UserWhereInput, UserOrderByInput from "./generated/prisma.graphql"
# import ApiKey, ApiKeyCreateInput, ApiKeyUpdateInput, ApiKeyWhereInput, ApiKeyOrderByInput from "./generated/prisma.graphql"
# import DeviceProvider, DeviceProviderCreateInput, DeviceProviderUpdateInput, DeviceProviderWhereInput, DeviceProviderOrderByInput from "./generated/prisma.graphql"
# import SystemSettings, SystemSettingsCreateInput, SystemSettingsUpdateInput from "./generated/prisma.graphql"

directive @isAuthenticated on QUERY | FIELD | FIELD_DEFINITION | MUTATION
directive @hasRole(roles: [String]) on QUERY | FIELD | FIELD_DEFINITION | MUTATION

type Query {
  autologin: AuthPayload
  me: User

  testprojects(where: TestProjectWhereInput, orderBy: TestProjectOrderByInput, skip: Int, first: Int): [TestProject!]! @isAuthenticated
  testproject(id: ID!): TestProject @isAuthenticated
  agents(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, first: Int): [Agent!]! @isAuthenticated
  agent(id: ID!): Agent @isAuthenticated
  chatbots(where: ChatbotWhereInput, orderBy: ChatbotOrderByInput, skip: Int, first: Int): [Chatbot!]! @isAuthenticated
  chatbot(id: ID!): Chatbot @isAuthenticated
  availablewatsonworkspaces(url: String!, version: String!, apikey: String, username: String, password: String): [DropDownValue!]! @isAuthenticated
  testsessions(where: TestSessionWhereInput, orderBy: TestSessionOrderByInput, skip: Int, first: Int): [TestSession!]! @isAuthenticated
  testsession(id: ID!): TestSession @isAuthenticated
  testsessiontestcaseresults(where: TestSessionTestCaseResultWhereInput, orderBy: TestSessionTestCaseResultOrderByInput, skip: Int, first: Int): [TestSessionTestCaseResult!]! @isAuthenticated
  testsessiontestcaseresult(id: ID!): TestSessionTestCaseResult @isAuthenticated
  testsessionjob(id: ID!): TestSessionJob @isAuthenticated
  testsessionjoblogs(jobId: ID!, orderBy: TestSessionJobLogOrderByInput, skip: Int, first: Int): [TestSessionJobLog!]! @isAuthenticated
  testsets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, first: Int): [TestSet!]! @isAuthenticated
  testset(id: ID!): TestSet @isAuthenticated
  testsetscript(id: ID!): TestSetScript @isAuthenticated
  testsetscripts(testSetId: ID!, skip: Int, first: Int): [TestSetScript!]! @isAuthenticated
  validatetestsetscript(script: String!, scriptType: TestSetScriptType!): ValidateTestSetScriptOutput! @isAuthenticated
  clonetestsetoptions: CloneTestSetOptionsPossible! @isAuthenticated
  testsetrepository(id: ID!): TestSetRepository @isAuthenticated
  testsetrepositories(testSetId: ID!, skip: Int, first: Int): [TestSetRepository!]! @isAuthenticated
  testsetfolder(id: ID!): TestSetFolder @isAuthenticated
  testsetfolders(testSetId: ID!, skip: Int, first: Int): [TestSetFolder!]! @isAuthenticated
  testsetexcel(id: ID!): TestSetExcel @isAuthenticated
  testsetexcels(testSetId: ID!, skip: Int, first: Int): [TestSetExcel!]! @isAuthenticated
  devicesets(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, first: Int): [DeviceSet!]! @isAuthenticated
  deviceset(id: ID!): DeviceSet @isAuthenticated
  availabledevices(provider: ID!): [DropDownValue!]! @isAuthenticated

  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, first: Int): [User!]! @isAuthenticated
  user(id: ID!): User @isAuthenticated
  apikeys(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, first: Int): [ApiKey!]! @isAuthenticated
  apikey(id: ID!): ApiKey @isAuthenticated
  deviceproviders(where: DeviceProviderWhereInput, orderBy: DeviceProviderOrderByInput, skip: Int, first: Int): [DeviceProvider!]! @isAuthenticated
  deviceprovider(id: ID!): DeviceProvider @isAuthenticated
  systemsettings: SystemSettings @isAuthenticated
  availableconnectors: [DropDownValue!]! @isAuthenticated

  chartTestSetResultCount(testProjectId: ID): [ChartTestSetResultCount!]! @isAuthenticated
  chartFailedCountByChatbotByDay(timeFrame: ChartTimeFrame): [CountByDaySeries!]! @isAuthenticated
  chartFailedCountByTestSetByDay(testProjectId: ID, timeFrame: ChartTimeFrame): [CountByDaySeries!]! @isAuthenticated
  chartTestProjectTrainingStatusByTestSet(testProjectId: ID!): [ChartTrainingStatus!]! @isAuthenticated
  chartTestProjectTrainingStatusByDeviceSet(testProjectId: ID!): [ChartTrainingStatus!]! @isAuthenticated

  liveChatConvoSteps(conversationId: String!): [String!]! @isAuthenticated
}

type Mutation {
  login(name: String, email: String, password: String!): AuthPayload!

  createTestProject(testProject: TestProjectCreateInput!): TestProject! @hasRole(roles: ["ADMIN","USER"])
  quickstartTestProject(testProject: TestProjectCreateInput!, startProject: Boolean!): ID! @hasRole(roles: ["ADMIN","USER"])
  startTestProject(id: ID!): ID! @hasRole(roles: ["ADMIN","USER","TESTER"])
  updateTestProject(id: ID!, testProject: TestProjectUpdateInput!): TestProject! @hasRole(roles: ["ADMIN","USER"])
  deleteTestProject(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])
  createAgent(agent: AgentCreateInput!): Agent! @hasRole(roles: ["ADMIN","USER"])
  updateAgent(id: ID!, agent: AgentUpdateInput!): Agent! @hasRole(roles: ["ADMIN","USER"])
  deleteAgent(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])
  createChatbot(chatbot: ChatbotCreateInput!): Chatbot! @hasRole(roles: ["ADMIN","USER"])
  updateChatbot(id: ID!, chatbot: ChatbotUpdateInput!): Chatbot! @hasRole(roles: ["ADMIN","USER"])
  deleteChatbot(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])
  createTestSession(testSession: TestSessionCreateInput!): TestSession! @hasRole(roles: ["ADMIN","USER","TESTER"])
  deleteTestSession(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])
  cancelTestSession(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])
  createTestSet(testSet: TestSetCreateInput!): TestSet! @hasRole(roles: ["ADMIN","USER"])
  updateTestSet(id: ID!, testSet: TestSetUpdateInput!): TestSet! @hasRole(roles: ["ADMIN","USER"])
  deleteTestSet(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])
  cloneTestSet(id: ID!, options: CloneTestSetOptionsChoosen!): TestSet! @hasRole(roles: ["ADMIN","USER"])
  createTestSetScript(testSetScript: TestSetScriptCreateInput!): TestSetScript! @hasRole(roles: ["ADMIN","USER"])
  updateTestSetScript(id: ID!, testSetScript: TestSetScriptUpdateInput!): TestSetScript! @hasRole(roles: ["ADMIN","USER"])
  deleteTestSetScript(id: ID!): Boolean! @hasRole(roles: ["ADMIN","USER"])
  createTestSetRepository(testSetRepository: TestSetRepositoryCreateInput!): TestSetRepository! @hasRole(roles: ["ADMIN","USER"])
  updateTestSetRepository(id: ID!, testSetRepository: TestSetRepositoryUpdateInput!): TestSetRepository! @hasRole(roles: ["ADMIN","USER"])
  deleteTestSetRepository(id: ID!): Boolean! @hasRole(roles: ["ADMIN","USER"])
  createTestSetFolder(testSetFolder: TestSetFolderCreateInput!): TestSetFolder! @hasRole(roles: ["ADMIN","USER"])
  updateTestSetFolder(id: ID!, testSetFolder: TestSetFolderUpdateInput!): TestSetFolder! @hasRole(roles: ["ADMIN","USER"])
  deleteTestSetFolder(id: ID!): Boolean! @hasRole(roles: ["ADMIN","USER"])
  createTestSetExcel(testSetExcel: TestSetExcelCreateInput!): TestSetExcel! @hasRole(roles: ["ADMIN","USER"])
  updateTestSetExcel(id: ID!, testSetExcel: TestSetExcelUpdateInput!): TestSetExcel! @hasRole(roles: ["ADMIN","USER"])
  deleteTestSetExcel(id: ID!): Boolean! @hasRole(roles: ["ADMIN","USER"])
  createDeviceSet(deviceSet: DeviceSetCreateInput!): DeviceSet! @hasRole(roles: ["ADMIN","USER"])
  updateDeviceSet(id: ID!, deviceSet: DeviceSetUpdateInput!): DeviceSet! @hasRole(roles: ["ADMIN","USER"])
  deleteDeviceSet(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])

  createUser(user: UserCreateInput!): User! @hasRole(roles: ["ADMIN"])
  updateUser(id: ID!, user: UserUpdateInput!): User! @hasRole(roles: ["ADMIN","USER"])
  deleteUser(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])

  createApiKey(apiKey: ApiKeyCreateInput!): ApiKey! @hasRole(roles: ["ADMIN"])
  updateApiKey(id: ID!, apiKey: ApiKeyUpdateInput!): ApiKey! @hasRole(roles: ["ADMIN"])
  deleteApiKey(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])

  createDeviceProvider(deviceProvider: DeviceProviderCreateInput!): DeviceProvider! @hasRole(roles: ["ADMIN"])
  updateDeviceProvider(id: ID!, deviceProvider: DeviceProviderUpdateInput!): DeviceProvider! @hasRole(roles: ["ADMIN"])
  deleteDeviceProvider(id: ID!): Boolean! @hasRole(roles: ["ADMIN"])

  updateSystemSettings(systemSettings: SystemSettingsUpdateInput!): SystemSettings! @hasRole(roles: ["ADMIN"])

  liveChatStartBot(id: ID!): String! @hasRole(roles: ["ADMIN","USER","TESTER"])
  liveChatSendToBot(conversationId: String!, convoStep: String!): Boolean! @hasRole(roles: ["ADMIN","USER","TESTER"])
  liveChatStopBot(conversationId: String!): Boolean! @hasRole(roles: ["ADMIN","USER","TESTER"])
  liveChatSaveConvoSteps(conversationId: String!, testSetId: ID, newTestSetName: String, testCaseName: String!): ID! @hasRole(roles: ["ADMIN","USER"])
}

type Subscription {
  newTestSession: TestSessionSubscriptionPayload!
  changeTestSession(ids: [ID!]!): TestSessionSubscriptionPayload!
  changeTestSessionJobs(testSessionIds: [ID!]!): TestSessionJobSubscriptionPayload!
  newTestSessionJobLogs(testSessionJobId: ID!): TestSessionJobLogSubscriptionPayload!
  newTestSessionTestCaseResults(testSessionIds: [ID!]!): TestSessionTestCaseResultSubscriptionPayload!
  liveChatConvoStepAdded(conversationId: String!): String!
  testSessionProgress(testSessionId: ID!): TestSession!
}

type DropDownValue {
  name: String!
  description: String
  value: String
}

enum Trend {
  GOOD
  BAD
  CONSTANT
  UNKNOWN
}

enum ChartTimeFrame {
  TODAY
  LASTWEEK
  LAST2WEEKS
  LASTMONTH
  LAST2MONTHS
  ALL
}

type ChartTestSetResultCount {
  id: ID!
  name: String!
  lastRun: DateTime!
  lastTestSessionId: ID!
  testCaseLastTotalCount: Int!
  testCaseLastSuccessCount: Int!
  testCaseLastSuccessRate: Float!
  previousRun: DateTime
  previousTestSessionId: ID
  testCasePreviousTotalCount: Int
  testCasePreviousSuccessCount: Int
  testCasePreviousSuccessRate: Float
  testCaseTrend: Trend!
}

type CountByDaySeries {
  id: ID!
  name: String!
  data: [Int]!
}

type ChartTrainingStatus {
  id: ID!
  name: String!
  totalCount: Int!
  successCount: Int!
  failedCount: Int!
}

type ValidateTestSetScriptOutput {
  name: String
  description: String
  script: String!
  scriptType: TestSetScriptType!
}

type CloneTestSetOptionsPossible {
  humanifiers: [String]!
}

input CloneTestSetOptionsChoosen {
  humanifiersToExecute: [String]!,
  percentToHumanify: Float!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  roles: [UserRole!]!
}
