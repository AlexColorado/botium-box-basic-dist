# import Agent from "./generated/prisma.graphql"
# import AgentCreateInput from "./generated/prisma.graphql"
# import AgentUpdateInput from "./generated/prisma.graphql"
# import AgentWhereInput from "./generated/prisma.graphql"
# import AgentOrderByInput from "./generated/prisma.graphql"

# import Chatbot from "./generated/prisma.graphql"
# import ChatbotCreateInput from "./generated/prisma.graphql"
# import ChatbotUpdateInput from "./generated/prisma.graphql"
# import ChatbotWhereInput from "./generated/prisma.graphql"
# import ChatbotOrderByInput from "./generated/prisma.graphql"

# import TestSession from "./generated/prisma.graphql"
# import TestSessionCreateInput from "./generated/prisma.graphql"
# import TestSessionWhereInput from "./generated/prisma.graphql"
# import TestSessionOrderByInput from "./generated/prisma.graphql"
# import TestSessionSubscriptionPayload from "./generated/prisma.graphql"

# import TestSet, TestSetCreateInput, TestSetUpdateInput from "./generated/prisma.graphql"
# import TestSetScript, TestSetScriptCreateInput, TestSetScriptUpdateInput from "./generated/prisma.graphql"
# import TestSetRepository, TestSetRepositoryCreateInput, TestSetRepositoryUpdateInput from "./generated/prisma.graphql"
# import TestSetFolder, TestSetFolderCreateInput, TestSetFolderUpdateInput from "./generated/prisma.graphql"

# import DeviceSet, DeviceSetCreateInput, DeviceSetUpdateInput, DeviceDescriptorCreateInput from "./generated/prisma.graphql"
# import ApiKey, ApiKeyCreateInput, ApiKeyUpdateInput, ApiKeyWhereInput, ApiKeyOrderByInput from "./generated/prisma.graphql"

type Query {
  testprojects(where: TestProjectWhereInput, orderBy: TestProjectOrderByInput, skip: Int, first: Int): [TestProject!]!
  testproject(id: ID!): TestProject
  agents(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, first: Int): [Agent!]!
  agent(id: ID!): Agent
  chatbots(where: ChatbotWhereInput, orderBy: ChatbotOrderByInput, skip: Int, first: Int): [Chatbot!]!
  chatbot(id: ID!): Chatbot
  availablewatsonworkspaces(url: String!, version: String!, username: String!, password: String!): [DropDownValue!]!
  testsessions(where: TestSessionWhereInput, orderBy: TestSessionOrderByInput, skip: Int, first: Int): [TestSession!]!
  testsession(id: ID!): TestSession
  testsets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, first: Int): [TestSet!]!
  testset(id: ID!): TestSet
  testsetscript(id: ID!): TestSetScript
  testsetscripts(testSetId: ID!, skip: Int, first: Int): [TestSetScript!]!
  validatetestsetscript(script: String!, scriptType: TestSetScriptType!): ValidateTestSetScriptOutput!
  testsetrepository(id: ID!): TestSetRepository
  testsetrepositories(testSetId: ID!, skip: Int, first: Int): [TestSetRepository!]!
  testsetfolder(id: ID!): TestSetFolder
  testsetfolders(testSetId: ID!, skip: Int, first: Int): [TestSetFolder!]!
  devicesets(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, first: Int): [DeviceSet!]!
  deviceset(id: ID!): DeviceSet
  availabledevices(provider: DeviceProvider!): [DropDownValue!]!
  
  apikeys(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, first: Int): [ApiKey!]!
  apikey(id: ID!): ApiKey
  me: User
  
  chartTestSetResultCount: [ChartTestSetResultCount!]!
  chartFailedCountByChatbotByDay(timeFrame: ChartTimeFrame): [ChartFailedCountByChatbotByDay!]!
  
  liveChatConvoSteps(conversationId: String!): [String!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createTestProject(testProject: TestProjectCreateInput!): TestProject!
  quickstartTestProject(testProject: TestProjectCreateInput!): ID!
  startTestProject(id: ID!): ID!
  updateTestProject(id: ID!, testProject: TestProjectUpdateInput!): TestProject!
  deleteTestProject(id: ID!): Boolean!
  createAgent(agent: AgentCreateInput!): Agent!
  updateAgent(id: ID!, agent: AgentUpdateInput!): Agent!
  deleteAgent(id: ID!): Boolean!
  createChatbot(chatbot: ChatbotCreateInput!): Chatbot!
  updateChatbot(id: ID!, chatbot: ChatbotUpdateInput!): Chatbot!
  deleteChatbot(id: ID!): Boolean!
  createTestSession(testSession: TestSessionCreateInput!): TestSession!
  deleteTestSession(id: ID!): Boolean!
  createTestSet(testSet: TestSetCreateInput!): TestSet!
  updateTestSet(id: ID!, testSet: TestSetUpdateInput!): TestSet!
  deleteTestSet(id: ID!): Boolean!
  createTestSetScript(testSetScript: TestSetScriptCreateInput!): TestSetScript!
  updateTestSetScript(id: ID!, testSetScript: TestSetScriptUpdateInput!): TestSetScript!
  deleteTestSetScript(id: ID!): Boolean!
  createTestSetRepository(testSetRepository: TestSetRepositoryCreateInput!): TestSetRepository!
  updateTestSetRepository(id: ID!, testSetRepository: TestSetRepositoryUpdateInput!): TestSetRepository!
  deleteTestSetRepository(id: ID!): Boolean!
  createTestSetFolder(testSetFolder: TestSetFolderCreateInput!): TestSetFolder!
  updateTestSetFolder(id: ID!, testSetFolder: TestSetFolderUpdateInput!): TestSetFolder!
  deleteTestSetFolder(id: ID!): Boolean!
  createDeviceSet(deviceSet: DeviceSetCreateInput!): DeviceSet!
  updateDeviceSet(id: ID!, deviceSet: DeviceSetUpdateInput!): DeviceSet!
  deleteDeviceSet(id: ID!): Boolean!

  createApiKey(apiKey: ApiKeyCreateInput!): ApiKey!
  updateApiKey(id: ID!, apiKey: ApiKeyUpdateInput!): ApiKey!
  deleteApiKey(id: ID!): Boolean!
  
  liveChatStartBot(id: ID!): String!
  liveChatSendToBot(conversationId: String!, convoStep: String!): Boolean!
  liveChatStopBot(conversationId: String!): Boolean!
  liveChatSaveConvoSteps(conversationId: String!, testSetId: ID, newTestSetName: String, testCaseName: String!): ID!
}

type Subscription {
  newTestSession: TestSessionSubscriptionPayload!
  changeTestSession(ids: [ID!]!): TestSessionSubscriptionPayload!
  changeTestSessionJobs(testSessionIds: [ID!]!): TestSessionJobSubscriptionPayload!
  newTestSessionJobLogs(testSessionJobId: ID!): TestSessionJobLogSubscriptionPayload!
  newTestSessionTestCaseResults(testSessionIds: [ID!]!): TestSessionTestCaseResultSubscriptionPayload!
  liveChatConvoStepAdded(conversationId: String!): String!
  testSessionProgress(testSessionId: ID!): TestSession!
}

type DropDownValue {
  name: String!
  description: String
  value: String
}

enum Trend {
  GOOD
  BAD
  CONSTANT
  UNKNOWN
}

enum ChartTimeFrame {
  TODAY
  LASTWEEK
  LAST2WEEKS
  LASTMONTH
  LAST2MONTHS
  ALL
}

type ChartTestSetResultCount {
  id: ID!
  name: String!
  testCaseLastTotalCount: Int!
  testCaseLastSuccessCount: Int!
  testCaseLastSuccessRate: Float!
  testCasePreviousTotalCount: Int!
  testCasePreviousSuccessCount: Int!
  testCasePreviousSuccessRate: Float!
  testCaseTrend: Trend!
}

type ChartFailedCountByChatbotByDay {
  id: ID!
  name: String!
  data: [Int]!
}

type ValidateTestSetScriptOutput {
  name: String
  description: String
  script: String!
  scriptType: TestSetScriptType!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
}
